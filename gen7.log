    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<cfg>") implicitTrue
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Filesystems.FAT32.Filesystem>[0]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:16325}") (var "Filesystems.FAT32.NodeParams")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Types.Nat"
                             .$ (    MkArg MW ExplicitArg (Just "{arg:16328}") (var "Prelude.Types.Nat")
                                 .=> var "Filesystems.FAT32.Filesystem" .$ var "{arg:16325}" .$ var "{arg:16328}"))
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Filesystems.FAT32.HVectNode.HVectNode>[0, 1]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:16270}") (var "Filesystems.FAT32.NodeParams")
                     .-> MkArg MW ExplicitArg (Just "k") (var "Prelude.Types.Nat")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ (var "Data.Monomorphic.Vect.VectNat.VectNat" .$ var "k")
                             .$ (    MkArg MW ExplicitArg (Just "ns") (var "Data.Monomorphic.Vect.VectNat.VectNat" .$ var "k")
                                 .=>    var "Builtin.DPair.DPair"
                                     .$ (var "Data.Monomorphic.Vect.HVectFinInc.HVectFinInc" .$ var "k" .$ var "ns")
                                     .$ (    MkArg
                                               MW
                                               ExplicitArg
                                               (Just "{arg:16277}")
                                               (var "Data.Monomorphic.Vect.HVectFinInc.HVectFinInc" .$ var "k" .$ var "ns")
                                         .=> var "Filesystems.FAT32.HVectNode.HVectNode" .$ var "{arg:16270}" .$ var "k" .$ var "ns" .$ var "{arg:16277}")))
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Data.Nat.LTE>[1]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "m") (var "Prelude.Types.Nat")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Types.Nat"
                             .$ (MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat") .=> var "Data.Nat.LTE" .$ var "n" .$ var "m"))
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Prelude.Types.Nat>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat"
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Filesystems.FAT32.Node>[0]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:16236}") (var "Filesystems.FAT32.NodeParams")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Types.Nat"
                             .$ (    MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                 .=>    var "Builtin.DPair.DPair"
                                     .$ (var "Data.FinInc.FinInc" .$ var "n")
                                     .$ (    MkArg MW ExplicitArg (Just "{arg:16241}") (var "Data.FinInc.FinInc" .$ var "n")
                                         .=> var "Filesystems.FAT32.Node" .$ var "{arg:16236}" .$ var "n" .$ var "{arg:16241}")))
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Data.FinInc.FinInc>[0]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "n") implicitFalse
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ (var "Data.FinInc.FinInc" .$ var "n")
                 })
          , IDef
              emptyFC
              "<Filesystems.FAT32.Filesystem>[0]"
              [    var "<Filesystems.FAT32.Filesystem>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:16325}>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Filesystems.FAT32.Root>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:16325}") (var "Filesystems.FAT32.NodeParams")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:16328}") (var "Prelude.Types.Nat")
                                                .=> var "Filesystems.FAT32.Filesystem" .$ var "{arg:16325}" .$ var "{arg:16328}"))
                                })
                         , IDef
                             emptyFC
                             "<<Filesystems.FAT32.Root>>"
                             [    var "<<Filesystems.FAT32.Root>>" .$ bindVar "^cons_fuel^" .$ (var "Filesystems.FAT32.MkNodeParams" .$ bindVar "clustSize" .$ bindVar "clustNZ")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Filesystems.FAT32.Root (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "n") implicitFalse
                                          .=>    var ">>="
                                              .$ (   var "<Data.Nat.LTE>[1]"
                                                  .$ var "^outmost-fuel^"
                                                  .$ (   var "Data.Nat.div'"
                                                      .$ (var "Prelude.Types.mult" .$ var "n" .$ var "clustSize")
                                                      .$ (var "Prelude.Types.mult" .$ var "n" .$ var "clustSize")
                                                      .$ (   var "Prelude.Types.S"
                                                          .$ (   var "Prelude.Types.S"
                                                              .$ (   var "Prelude.Types.S"
                                                                  .$ (   var "Prelude.Types.S"
                                                                      .$ (   var "Prelude.Types.S"
                                                                          .$ (   var "Prelude.Types.S"
                                                                              .$ (   var "Prelude.Types.S"
                                                                                  .$ (   var "Prelude.Types.S"
                                                                                      .$ (   var "Prelude.Types.S"
                                                                                          .$ (   var "Prelude.Types.S"
                                                                                              .$ (   var "Prelude.Types.S"
                                                                                                  .$ (   var "Prelude.Types.S"
                                                                                                      .$ (   var "Prelude.Types.S"
                                                                                                          .$ (   var "Prelude.Types.S"
                                                                                                              .$ (   var "Prelude.Types.S"
                                                                                                                  .$ (   var "Prelude.Types.S"
                                                                                                                      .$ (   var "Prelude.Types.S"
                                                                                                                          .$ (   var "Prelude.Types.S"
                                                                                                                              .$ (   var "Prelude.Types.S"
                                                                                                                                  .$ (   var "Prelude.Types.S"
                                                                                                                                      .$ (   var "Prelude.Types.S"
                                                                                                                                          .$ (   var "Prelude.Types.S"
                                                                                                                                              .$ (   var "Prelude.Types.S"
                                                                                                                                                  .$ (   var "Prelude.Types.S"
                                                                                                                                                      .$ (   var "Prelude.Types.S"
                                                                                                                                                          .$ (   var "Prelude.Types.S"
                                                                                                                                                              .$ (   var "Prelude.Types.S"
                                                                                                                                                                  .$ (   var "Prelude.Types.S"
                                                                                                                                                                      .$ (   var "Prelude.Types.S"
                                                                                                                                                                          .$ (   var "Prelude.Types.S"
                                                                                                                                                                              .$ (   var
                                                                                                                                                                                       "Prelude.Types.S"
                                                                                                                                                                                  .$ var
                                                                                                                                                                                       "Prelude.Types.Z")))))))))))))))))))))))))))))))))
                                              .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                                  .=> iCase
                                                        { sc = var "{lamc:0}"
                                                        , ty = implicitFalse
                                                        , clauses =
                                                            [    var "Builtin.DPair.MkDPair" .$ bindVar "k" .$ bindVar "klte"
                                                              .=    var ">>="
                                                                 .$ (   var "<Filesystems.FAT32.HVectNode.HVectNode>[0, 1]"
                                                                     .$ var "^outmost-fuel^"
                                                                     .$ (var "Filesystems.FAT32.MkNodeParams" .$ var "clustSize" .$ var "clustNZ")
                                                                     .$ var "k")
                                                                 .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                                                     .=> iCase
                                                                           { sc = var "{lamc:0}"
                                                                           , ty = implicitFalse
                                                                           , clauses =
                                                                               [    var "Builtin.DPair.MkDPair" .$ bindVar "ns" .$ (var "Builtin.DPair.MkDPair" .$ bindVar "cs" .$ bindVar "entries")
                                                                                 .=    var "Prelude.pure"
                                                                                    .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                                    .$ (   var "Builtin.DPair.MkDPair"
                                                                                        .$ implicitTrue
                                                                                        .$ (   var "Filesystems.FAT32.Root"
                                                                                            .! ("clustSize", var "clustSize")
                                                                                            .! ("clustNZ", var "clustNZ")
                                                                                            .! ("n", var "n")
                                                                                            .! ("k", var "k")
                                                                                            .! ("klte", var "klte")
                                                                                            .! ("ns", var "ns")
                                                                                            .! ("cs", var "cs")
                                                                                            .$ var "entries"))
                                                                               ]
                                                                           })
                                                            ]
                                                        })))
                             , var "<<Filesystems.FAT32.Root>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Filesystems.FAT32.Filesystem[0] (non-recursive)"))
                         .$ (var "<<Filesystems.FAT32.Root>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:16325}>")
                     }
              ]
          , IDef
              emptyFC
              "<Filesystems.FAT32.HVectNode.HVectNode>[0, 1]"
              [    var "<Filesystems.FAT32.HVectNode.HVectNode>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:16270}>" .$ bindVar "inter^<k>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Filesystems.FAT32.HVectNode.Nil>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:16270}") (var "Filesystems.FAT32.NodeParams")
                                    .-> MkArg MW ExplicitArg (Just "k") (var "Prelude.Types.Nat")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ (var "Data.Monomorphic.Vect.VectNat.VectNat" .$ var "k")
                                            .$ (    MkArg MW ExplicitArg (Just "ns") (var "Data.Monomorphic.Vect.VectNat.VectNat" .$ var "k")
                                                .=>    var "Builtin.DPair.DPair"
                                                    .$ (var "Data.Monomorphic.Vect.HVectFinInc.HVectFinInc" .$ var "k" .$ var "ns")
                                                    .$ (    MkArg
                                                              MW
                                                              ExplicitArg
                                                              (Just "{arg:16277}")
                                                              (var "Data.Monomorphic.Vect.HVectFinInc.HVectFinInc" .$ var "k" .$ var "ns")
                                                        .=>    var "Filesystems.FAT32.HVectNode.HVectNode"
                                                            .$ var "{arg:16270}"
                                                            .$ var "k"
                                                            .$ var "ns"
                                                            .$ var "{arg:16277}")))
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Filesystems.FAT32.HVectNode.(::)>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:16270}") (var "Filesystems.FAT32.NodeParams")
                                    .-> MkArg MW ExplicitArg (Just "k") (var "Prelude.Types.Nat")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ (var "Data.Monomorphic.Vect.VectNat.VectNat" .$ var "k")
                                            .$ (    MkArg MW ExplicitArg (Just "ns") (var "Data.Monomorphic.Vect.VectNat.VectNat" .$ var "k")
                                                .=>    var "Builtin.DPair.DPair"
                                                    .$ (var "Data.Monomorphic.Vect.HVectFinInc.HVectFinInc" .$ var "k" .$ var "ns")
                                                    .$ (    MkArg
                                                              MW
                                                              ExplicitArg
                                                              (Just "{arg:16277}")
                                                              (var "Data.Monomorphic.Vect.HVectFinInc.HVectFinInc" .$ var "k" .$ var "ns")
                                                        .=>    var "Filesystems.FAT32.HVectNode.HVectNode"
                                                            .$ var "{arg:16270}"
                                                            .$ var "k"
                                                            .$ var "ns"
                                                            .$ var "{arg:16277}")))
                                })
                         , IDef
                             emptyFC
                             "<<Filesystems.FAT32.HVectNode.Nil>>"
                             [    var "<<Filesystems.FAT32.HVectNode.Nil>>" .$ bindVar "^cons_fuel^" .$ bindVar "cfg" .$ var "Prelude.Types.Z"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Filesystems.FAT32.HVectNode.Nil (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (   var "Builtin.DPair.MkDPair"
                                          .$ implicitTrue
                                          .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "Filesystems.FAT32.HVectNode.Nil" .! ("cfg", var "cfg")))))
                             , var "<<Filesystems.FAT32.HVectNode.Nil>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<Filesystems.FAT32.HVectNode.(::)>>"
                             [    var "<<Filesystems.FAT32.HVectNode.(::)>>" .$ bindVar "^cons_fuel^" .$ bindVar "cfg" .$ (var "Prelude.Types.S" .$ bindVar "k")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Filesystems.FAT32.HVectNode.(::) (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Filesystems.FAT32.Node>[0]" .$ var "^outmost-fuel^" .$ var "cfg")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [       var "Builtin.DPair.MkDPair"
                                                         .$ bindVar "n"
                                                         .$ (var "Builtin.DPair.MkDPair" .$ bindVar "cur" .$ bindVar "^bnd^{arg:16305}")
                                                      .=    var ">>="
                                                         .$ (var "<Filesystems.FAT32.HVectNode.HVectNode>[0, 1]" .$ var "^cons_fuel^" .$ var "cfg" .$ var "k")
                                                         .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                                             .=> iCase
                                                                   { sc = var "{lamc:0}"
                                                                   , ty = implicitFalse
                                                                   , clauses =
                                                                       [       var "Builtin.DPair.MkDPair"
                                                                            .$ bindVar "ns"
                                                                            .$ (var "Builtin.DPair.MkDPair" .$ bindVar "cs" .$ bindVar "^bnd^{arg:16308}")
                                                                         .=    var "Prelude.pure"
                                                                            .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                            .$ (   var "Builtin.DPair.MkDPair"
                                                                                .$ implicitTrue
                                                                                .$ (   var "Builtin.DPair.MkDPair"
                                                                                    .$ implicitTrue
                                                                                    .$ (   var "Filesystems.FAT32.HVectNode.(::)"
                                                                                        .! ("k", var "k")
                                                                                        .! ("cfg", var "cfg")
                                                                                        .! ("n", var "n")
                                                                                        .! ("ns", var "ns")
                                                                                        .! ("cur", var "cur")
                                                                                        .! ("cs", var "cs")
                                                                                        .$ var "^bnd^{arg:16305}"
                                                                                        .$ var "^bnd^{arg:16308}")))
                                                                       ]
                                                                   })
                                                    ]
                                                }))
                             , var "<<Filesystems.FAT32.HVectNode.(::)>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Filesystems.FAT32.HVectNode.HVectNode[0, 1] (dry fuel)"))
                                    .$ (var "<<Filesystems.FAT32.HVectNode.Nil>>" .$ var "Data.Fuel.Dry" .$ var "inter^<{arg:16270}>" .$ var "inter^<k>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Filesystems.FAT32.HVectNode.HVectNode[0, 1] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (   var "<<Filesystems.FAT32.HVectNode.Nil>>"
                                                    .$ var "^fuel_arg^"
                                                    .$ var "inter^<{arg:16270}>"
                                                    .$ var "inter^<k>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (   var "<<Filesystems.FAT32.HVectNode.(::)>>"
                                                        .$ var "^sub^fuel_arg^"
                                                        .$ var "inter^<{arg:16270}>"
                                                        .$ var "inter^<k>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<Data.Nat.LTE>[1]"
              [    var "<Data.Nat.LTE>[1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<m>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.Nat.LTEZero>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "m") (var "Prelude.Types.Nat")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat") .=> var "Data.Nat.LTE" .$ var "n" .$ var "m"))
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.Nat.LTESucc>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "m") (var "Prelude.Types.Nat")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat") .=> var "Data.Nat.LTE" .$ var "n" .$ var "m"))
                                })
                         , IDef
                             emptyFC
                             "<<Data.Nat.LTEZero>>"
                             [    var "<<Data.Nat.LTEZero>>" .$ bindVar "^cons_fuel^" .$ bindVar "right"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.Nat.LTEZero (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "Data.Nat.LTEZero" .! ("right", var "right"))))
                             ]
                         , IDef
                             emptyFC
                             "<<Data.Nat.LTESucc>>"
                             [    var "<<Data.Nat.LTESucc>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "right")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.Nat.LTESucc (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Data.Nat.LTE>[1]" .$ var "^cons_fuel^" .$ var "right")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "left" .$ bindVar "^bnd^{arg:2124}"
                                                      .=    var "Prelude.pure"
                                                         .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                         .$ (   var "Builtin.DPair.MkDPair"
                                                             .$ implicitTrue
                                                             .$ (   var "Data.Nat.LTESucc"
                                                                 .! ("right", var "right")
                                                                 .! ("left", var "left")
                                                                 .$ var "^bnd^{arg:2124}"))
                                                    ]
                                                }))
                             , var "<<Data.Nat.LTESucc>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.Nat.LTE[1] (dry fuel)"))
                                    .$ (var "<<Data.Nat.LTEZero>>" .$ var "Data.Fuel.Dry" .$ var "inter^<m>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.Nat.LTE[1] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (var "<<Data.Nat.LTEZero>>" .$ var "^fuel_arg^" .$ var "inter^<m>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Data.Nat.LTESucc>>" .$ var "^sub^fuel_arg^" .$ var "inter^<m>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<Prelude.Types.Nat>[]"
              [    var "<Prelude.Types.Nat>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Prelude.Types.Z>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat"
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Prelude.Types.S>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat"
                                })
                         , IDef
                             emptyFC
                             "<<Prelude.Types.Z>>"
                             [    var "<<Prelude.Types.Z>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Types.Z (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Prelude.Types.Z")
                             ]
                         , IDef
                             emptyFC
                             "<<Prelude.Types.S>>"
                             [    var "<<Prelude.Types.S>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Types.S (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:825}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Prelude.Types.S" .$ var "^bnd^{arg:825}")))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Prelude.Types.Nat[] (dry fuel)"))
                                    .$ (var "<<Prelude.Types.Z>>" .$ var "Data.Fuel.Dry")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Prelude.Types.Nat[] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<Prelude.Types.Z>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Prelude.Types.S>>" .$ var "^sub^fuel_arg^"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<Filesystems.FAT32.Node>[0]"
              [    var "<Filesystems.FAT32.Node>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:16236}>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Filesystems.FAT32.File>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:16236}") (var "Filesystems.FAT32.NodeParams")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (    MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                                .=>    var "Builtin.DPair.DPair"
                                                    .$ (var "Data.FinInc.FinInc" .$ var "n")
                                                    .$ (    MkArg MW ExplicitArg (Just "{arg:16241}") (var "Data.FinInc.FinInc" .$ var "n")
                                                        .=> var "Filesystems.FAT32.Node" .$ var "{arg:16236}" .$ var "n" .$ var "{arg:16241}")))
                                })
                         , IDef
                             emptyFC
                             "<<Filesystems.FAT32.File>>"
                             [       var "<<Filesystems.FAT32.File>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ (var "Filesystems.FAT32.MkNodeParams" .$ bindVar "clustSize" .$ bindVar "clustNZ")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Filesystems.FAT32.File (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "n") implicitFalse
                                          .=>    var ">>="
                                              .$ (   var "<Data.FinInc.FinInc>[0]"
                                                  .$ var "^outmost-fuel^"
                                                  .$ (var "Prelude.Types.mult" .$ var "n" .$ var "clustSize"))
                                              .$ (    MkArg MW ExplicitArg (Just "k") implicitFalse
                                                  .=>    var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (   var "Builtin.DPair.MkDPair"
                                                          .$ implicitTrue
                                                          .$ (   var "Builtin.DPair.MkDPair"
                                                              .$ implicitTrue
                                                              .$ (   var "Filesystems.FAT32.File"
                                                                  .! ("clustSize", var "clustSize")
                                                                  .! ("clustNZ", var "clustNZ")
                                                                  .! ("n", var "n")
                                                                  .! ("k", var "k")))))))
                             , var "<<Filesystems.FAT32.File>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Filesystems.FAT32.Node[0] (non-recursive)"))
                         .$ (var "<<Filesystems.FAT32.File>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:16236}>")
                     }
              ]
          , IDef
              emptyFC
              "<Data.FinInc.FinInc>[0]"
              [    var "<Data.FinInc.FinInc>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.FinInc.MkFinInc>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "n") implicitFalse
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ (var "Data.FinInc.FinInc" .$ var "n")
                                })
                         , IDef
                             emptyFC
                             "<<Data.FinInc.MkFinInc>>"
                             [    var "<<Data.FinInc.MkFinInc>>" .$ bindVar "^cons_fuel^" .$ bindVar "n"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.FinInc.MkFinInc (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Data.Nat.LTE>[1]" .$ var "^outmost-fuel^" .$ var "n")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "val" .$ bindVar "prf"
                                                      .=    var "Prelude.pure"
                                                         .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                         .$ (var "Data.FinInc.MkFinInc" .! ("n", var "n") .$ var "val" .$ var "prf")
                                                    ]
                                                }))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Data.FinInc.FinInc[0] (non-recursive)"))
                         .$ (var "<<Data.FinInc.MkFinInc>>" .$ var "^fuel_arg^" .$ var "inter^<n>")
                     }
              ]
          ]
      , scope = var "<Filesystems.FAT32.Filesystem>[0]" .$ var "^outmost-fuel^" .$ var "outer^<cfg>"
      }

