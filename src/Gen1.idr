module Gen1

import public Deriving.DepTyCheck.Gen
import public Data.Fuel
import public Filesystems.FAT32

%default total

public export 
genFilesystem : Fuel -> (cfg : NodeParams) -> Gen MaybeEmpty (maxClust ** Filesystem cfg maxClust)
genFilesystem outmostFuel outerCfg =
    let FilesystemsFAT32Filesystem0 : Data.Fuel.Fuel -> (arg4017 : Filesystems.FAT32.NodeParams) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ arg4020 => Filesystems.FAT32.Filesystem arg4017 arg4020));
        FilesystemsFAT32HVectMaybeNodeHVectMaybeNode01 : Data.Fuel.Fuel -> (arg3794 : Filesystems.FAT32.NodeParams) -> (k : Prelude.Types.Nat) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair (Data.Monomorphic.Vect.VectNat.VectNat k) (\ ns => Builtin.DPair.DPair (Data.Monomorphic.Vect.VectNat.VectNat k) (\ ms => Builtin.DPair.DPair (Data.Monomorphic.Vect.HVectFinInc.HVectFinInc k ns) (\ arg3803 => Builtin.DPair.DPair (Data.Monomorphic.Vect.HVectFinInc.HVectFinInc k ms) (\ arg3806 => Filesystems.FAT32.HVectMaybeNode.HVectMaybeNode arg3794 k ns ms arg3803 arg3806)))));
        DataNatLTE1 : Data.Fuel.Fuel -> (m : Prelude.Types.Nat) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Data.Nat.LTE n m));
        PreludeTypesNat : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty Prelude.Types.Nat;
        FilesystemsFAT32MaybeNodeMaybeNode0 : Data.Fuel.Fuel -> (arg3768 : Filesystems.FAT32.NodeParams) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Builtin.DPair.DPair Prelude.Types.Nat (\ m => Builtin.DPair.DPair (Data.FinInc.FinInc n) (\ arg3775 => Builtin.DPair.DPair (Data.FinInc.FinInc m) (\ arg3778 => Filesystems.FAT32.MaybeNode.MaybeNode arg3768 n m arg3775 arg3778)))));
        FilesystemsFAT32Node0 : Data.Fuel.Fuel -> (arg3878 : Filesystems.FAT32.NodeParams) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Builtin.DPair.DPair Prelude.Types.Nat (\ m => Builtin.DPair.DPair (Data.FinInc.FinInc n) (\ arg3885 => Builtin.DPair.DPair (Data.FinInc.FinInc m) (\ arg3888 => Filesystems.FAT32.Node arg3878 n m arg3885 arg3888)))));
        DataFinIncFinInc : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair ? (\ n => Data.FinInc.FinInc n));
        DataNatLTE : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Builtin.DPair.DPair Prelude.Types.Nat (\ m => Data.Nat.LTE n m)));
        FilesystemsFAT32Metadata0 : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty Filesystems.FAT32.Metadata;
        DataFinIncFinInc0 : Data.Fuel.Fuel -> (n : ?) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Data.FinInc.FinInc n);
        PreludeBasicsBool : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty Prelude.Basics.Bool;
        FilesystemsFAT32Filesystem0 fuelArg1 interArg4017 = 
            let FilesystemsFAT32Root'' : Data.Fuel.Fuel -> (arg4017 : Filesystems.FAT32.NodeParams) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ arg4020 => Filesystems.FAT32.Filesystem arg4017 arg4020));
                FilesystemsFAT32Root'' consFuel (Filesystems.FAT32.MkNodeParams clustSize clustNZ) = Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.Root (orders)") (((PreludeTypesNat) (outmostFuel)) >>= (\ n => (DataNatLTE1 (outmostFuel) (Data.Nat.div' (Prelude.Types.mult n clustSize) (Prelude.Types.mult n clustSize) (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S Prelude.Types.Z))))))))))))))))))))))))))))))))) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair k klte => ((FilesystemsFAT32HVectMaybeNodeHVectMaybeNode01) (outmostFuel) (Filesystems.FAT32.MkNodeParams clustSize clustNZ) k) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair ns (Builtin.DPair.MkDPair ms (Builtin.DPair.MkDPair cs (Builtin.DPair.MkDPair ts entries))) => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Filesystems.FAT32.Root {clustSize = clustSize} {clustNZ = clustNZ} {n = n} {k = k} {klte = klte} {ns = ns} {ms = ms} {cs = cs} {ts = ts} entries)) }) })));
                -- FilesystemsFAT32Root'' _ _ = empty
            in Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.Filesystem[0] (non-recursive)") (FilesystemsFAT32Root'' fuelArg1 interArg4017);
        FilesystemsFAT32HVectMaybeNodeHVectMaybeNode01 fuelArg1 interArg3794 interK =
            let FilesystemsFAT32HVectMaybeNodeNil'' : Data.Fuel.Fuel -> (arg3794 : Filesystems.FAT32.NodeParams) -> (k : Prelude.Types.Nat) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair (Data.Monomorphic.Vect.VectNat.VectNat k) (\ ns => Builtin.DPair.DPair (Data.Monomorphic.Vect.VectNat.VectNat k) (\ ms => Builtin.DPair.DPair (Data.Monomorphic.Vect.HVectFinInc.HVectFinInc k ns) (\ arg3803 => Builtin.DPair.DPair (Data.Monomorphic.Vect.HVectFinInc.HVectFinInc k ms) (\ arg3806 => Filesystems.FAT32.HVectMaybeNode.HVectMaybeNode arg3794 k ns ms arg3803 arg3806)))));
                FilesystemsFAT32HVectMaybeNodeColons'' : Data.Fuel.Fuel -> (arg3794 : Filesystems.FAT32.NodeParams) -> (k : Prelude.Types.Nat) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair (Data.Monomorphic.Vect.VectNat.VectNat k) (\ ns => Builtin.DPair.DPair (Data.Monomorphic.Vect.VectNat.VectNat k) (\ ms => Builtin.DPair.DPair (Data.Monomorphic.Vect.HVectFinInc.HVectFinInc k ns) (\ arg3803 => Builtin.DPair.DPair (Data.Monomorphic.Vect.HVectFinInc.HVectFinInc k ms) (\ arg3806 => Filesystems.FAT32.HVectMaybeNode.HVectMaybeNode arg3794 k ns ms arg3803 arg3806)))));
                (FilesystemsFAT32HVectMaybeNodeNil'') consFuel cfg Prelude.Types.Z = Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.HVectMaybeNode.Nil (orders)") (Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Filesystems.FAT32.HVectMaybeNode.Nil {cfg = cfg}))))));
                (FilesystemsFAT32HVectMaybeNodeNil'') _ _ _ = empty;
                (FilesystemsFAT32HVectMaybeNodeColons'') consFuel cfg (Prelude.Types.S k) = Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.HVectMaybeNode.(::) (orders)") ((FilesystemsFAT32MaybeNodeMaybeNode0 consFuel cfg) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair n (Builtin.DPair.MkDPair m (Builtin.DPair.MkDPair cur (Builtin.DPair.MkDPair tot bndArg3848))) => ((FilesystemsFAT32HVectMaybeNodeHVectMaybeNode01) (consFuel) cfg k) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair ns (Builtin.DPair.MkDPair ms (Builtin.DPair.MkDPair cs (Builtin.DPair.MkDPair ts bndArg3851))) => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Filesystems.FAT32.HVectMaybeNode.(::) {k = k} {cfg = cfg} {n = n} {ns = ns} {m = m} {ms = ms} {cur = cur} {tot = tot} {cs = cs} {ts = ts} (bndArg3848) (bndArg3851)))))) }) }));
                (FilesystemsFAT32HVectMaybeNodeColons'') _ _ _ = empty
            in case (fuelArg1) {- : Data.Fuel.Fuel -} of { 
                Data.Fuel.Dry => Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.HVectMaybeNode.HVectMaybeNode[0, 1] (dry fuel)") (FilesystemsFAT32HVectMaybeNodeNil'' Data.Fuel.Dry interArg3794 interK);
                Data.Fuel.More subfuelArg => Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.HVectMaybeNode.HVectMaybeNode[0, 1] (spend fuel)") (Test.DepTyCheck.Gen.frequency ((Builtin.MkPair Data.Nat1.one ((FilesystemsFAT32HVectMaybeNodeNil'') (fuelArg1) interArg3794 interK)) :: ((Builtin.MkPair (Deriving.DepTyCheck.Util.Reflection.leftDepth (subfuelArg)) ((FilesystemsFAT32HVectMaybeNodeColons'') (subfuelArg) interArg3794 interK)) :: Nil)))
            };
        DataNatLTE1 fuelArg1 interM =
            let DataNatLTEZero'' : Data.Fuel.Fuel -> (m : Prelude.Types.Nat) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Data.Nat.LTE n m));
                DataNatLTESucc'' : Data.Fuel.Fuel -> (m : Prelude.Types.Nat) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Data.Nat.LTE n m));
                DataNatLTEZero'' consFuel right = Test.DepTyCheck.Gen.label (fromString "Data.Nat.LTEZero (orders)") (Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Data.Nat.LTEZero {right = right})));
                DataNatLTESucc'' consFuel (Prelude.Types.S right) = Test.DepTyCheck.Gen.label (fromString "Data.Nat.LTESucc (orders)") ((DataNatLTE1 consFuel right) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair left bndArg2124 => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Data.Nat.LTESucc {right = right} {left = left} (bndArg2124))) }));
                DataNatLTESucc'' _ _ = empty
            in case (fuelArg1) {- : Data.Fuel.Fuel -} of {
                Data.Fuel.Dry => Test.DepTyCheck.Gen.label (fromString "Data.Nat.LTE[1] (dry fuel)") (DataNatLTEZero'' Data.Fuel.Dry interM);
                Data.Fuel.More subFuelArg => Test.DepTyCheck.Gen.label (fromString "Data.Nat.LTE[1] (spend fuel)") (Test.DepTyCheck.Gen.frequency ((Builtin.MkPair Data.Nat1.one (DataNatLTEZero'' fuelArg1 interM)) :: ((Builtin.MkPair (Deriving.DepTyCheck.Util.Reflection.leftDepth subFuelArg) (DataNatLTESucc'' subFuelArg interM)) :: Nil)))
            };
        PreludeTypesNat fuelArg1 =
            let PreludeTypesZ'' : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty Prelude.Types.Nat;
                PreludeTypesS'' : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty Prelude.Types.Nat;
                (PreludeTypesZ'') consFuel = Test.DepTyCheck.Gen.label (fromString "Prelude.Types.Z (orders)") (Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} Prelude.Types.Z);
                (PreludeTypesS'') consFuel = Test.DepTyCheck.Gen.label (fromString "Prelude.Types.S (orders)") (((PreludeTypesNat) (consFuel)) >>= (\ bndArg825 => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Prelude.Types.S (bndArg825))))
            in case (fuelArg1) {- : Data.Fuel.Fuel -} of {
                Data.Fuel.Dry => Test.DepTyCheck.Gen.label (fromString "Prelude.Types.Nat[] (dry fuel)") ((PreludeTypesZ'') Data.Fuel.Dry);
                Data.Fuel.More subfuelArg => Test.DepTyCheck.Gen.label (fromString "Prelude.Types.Nat[] (spend fuel)") (Test.DepTyCheck.Gen.frequency ((Builtin.MkPair Data.Nat1.one ((PreludeTypesZ'') (fuelArg1))) :: ((Builtin.MkPair (Deriving.DepTyCheck.Util.Reflection.leftDepth (subfuelArg)) ((PreludeTypesS'') (subfuelArg))) :: Nil)))
            };
        FilesystemsFAT32MaybeNodeMaybeNode0 fuelArg1 interArg3768 =
            let FilesystemsFAT32MaybeNodeNothing'' : Data.Fuel.Fuel -> (arg3768 : Filesystems.FAT32.NodeParams) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Builtin.DPair.DPair Prelude.Types.Nat (\ m => Builtin.DPair.DPair (Data.FinInc.FinInc n) (\ arg3775 => Builtin.DPair.DPair (Data.FinInc.FinInc m) (\ arg3778 => Filesystems.FAT32.MaybeNode.MaybeNode arg3768 n m arg3775 arg3778)))));
                FilesystemsFAT32MaybeNodeJust'' : Data.Fuel.Fuel -> (arg3768 : Filesystems.FAT32.NodeParams) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Builtin.DPair.DPair Prelude.Types.Nat (\ m => Builtin.DPair.DPair (Data.FinInc.FinInc n) (\ arg3775 => Builtin.DPair.DPair (Data.FinInc.FinInc m) (\ arg3778 => Filesystems.FAT32.MaybeNode.MaybeNode arg3768 n m arg3775 arg3778))))); FilesystemsFAT32MaybeNodeNothing'' consFuel cfg = Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.MaybeNode.Nothing (orders)") (((DataFinIncFinInc) (outmostFuel)) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair m tot => ((DataFinIncFinInc) (outmostFuel)) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair n cur => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Filesystems.FAT32.MaybeNode.Nothing {m = m} {tot = tot} {n = n} {cur = cur} {cfg = cfg}))))) }) }));
                FilesystemsFAT32MaybeNodeJust'' consFuel cfg = Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.MaybeNode.Just (orders)") ((FilesystemsFAT32Node0 consFuel cfg) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair n (Builtin.DPair.MkDPair m (Builtin.DPair.MkDPair tot (Builtin.DPair.MkDPair cur bndArg3789))) => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Filesystems.FAT32.MaybeNode.Just {m = m} {cur = cur} {n = n} {tot = tot} {cfg = cfg} (bndArg3789)))))) }))
            in case (fuelArg1) {- : Data.Fuel.Fuel -} of {
                Data.Fuel.Dry => Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.MaybeNode.MaybeNode[0] (dry fuel)") (FilesystemsFAT32MaybeNodeNothing'' Data.Fuel.Dry interArg3768);
                Data.Fuel.More subfuelArg => Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.MaybeNode.MaybeNode[0] (spend fuel)") (Test.DepTyCheck.Gen.frequency ((Builtin.MkPair Data.Nat1.one (FilesystemsFAT32MaybeNodeNothing'' fuelArg1 interArg3768)) :: ((Builtin.MkPair (Deriving.DepTyCheck.Util.Reflection.leftDepth (subfuelArg)) (FilesystemsFAT32MaybeNodeJust'' subfuelArg interArg3768)) :: Nil)))
            };
        FilesystemsFAT32Node0 fuelArg1 interArg3878 =
            let FilesystemsFAT32File'' : Data.Fuel.Fuel -> (arg3878 : Filesystems.FAT32.NodeParams) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Builtin.DPair.DPair Prelude.Types.Nat (\ m => Builtin.DPair.DPair (Data.FinInc.FinInc n) (\ arg3885 => Builtin.DPair.DPair (Data.FinInc.FinInc m) (\ arg3888 => Filesystems.FAT32.Node arg3878 n m arg3885 arg3888)))));
                FilesystemsFAT32Dir'' : Data.Fuel.Fuel -> (arg3878 : Filesystems.FAT32.NodeParams) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Builtin.DPair.DPair Prelude.Types.Nat (\ m => Builtin.DPair.DPair (Data.FinInc.FinInc n) (\ arg3885 => Builtin.DPair.DPair (Data.FinInc.FinInc m) (\ arg3888 => Filesystems.FAT32.Node arg3878 n m arg3885 arg3888)))));
                FilesystemsFAT32File'' consFuel (Filesystems.FAT32.MkNodeParams clustSize clustNZ) = Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.File (orders)") (((PreludeTypesNat) (outmostFuel)) >>= (\ n => (DataFinIncFinInc0 outmostFuel (Prelude.Types.mult n clustSize)) >>= (\ k => ((FilesystemsFAT32Metadata0) (outmostFuel)) >>= (\ meta => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Filesystems.FAT32.File {clustSize = clustSize} {clustNZ = clustNZ} {n = n} {k = k} meta)))))))));
                -- FilesystemsFAT32File'' _ _ = empty;
                FilesystemsFAT32Dir'' consFuel (Filesystems.FAT32.MkNodeParams clustSize clustNZ) = Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.Dir (orders)") (((PreludeTypesNat) (outmostFuel)) >>= (\ n => (DataNatLTE1 outmostFuel (Data.Nat.divNatNZ (Prelude.Num.(*) {ty = Prelude.Types.Nat} n clustSize) Filesystems.FAT32.Constants.DirentSize (Data.Nat.SIsNonZero {x = Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S Prelude.Types.Z))))))))))))))))))))))))))))))}))) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair kv kp => ((FilesystemsFAT32HVectMaybeNodeHVectMaybeNode01) (consFuel) (Filesystems.FAT32.MkNodeParams clustSize clustNZ) kv) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair ns (Builtin.DPair.MkDPair ms (Builtin.DPair.MkDPair cs (Builtin.DPair.MkDPair ts entries))) => ((FilesystemsFAT32Metadata0) (outmostFuel)) >>= (\ meta => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Filesystems.FAT32.Dir {clustSize = clustSize} {clustNZ = clustNZ} {n = n} {kv = kv} {kp = kp} {ns = ns} {ms = ms} {cs = cs} {ts = ts} meta entries)))))) }) })));
                -- FilesystemsFAT32Dir'' _ _ = empty
            in case (fuelArg1) {- : Data.Fuel.Fuel -} of {
                Data.Fuel.Dry => Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.Node[0] (dry fuel)") (FilesystemsFAT32File'' Data.Fuel.Dry interArg3878);
                Data.Fuel.More subfuelArg => Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.Node[0] (spend fuel)") (Test.DepTyCheck.Gen.frequency ((Builtin.MkPair Data.Nat1.one (FilesystemsFAT32File'' fuelArg1 interArg3878)) :: ((Builtin.MkPair (Deriving.DepTyCheck.Util.Reflection.leftDepth (subfuelArg)) (FilesystemsFAT32Dir'' (subfuelArg) interArg3878)) :: Nil)))
            };
        DataFinIncFinInc fuelArg1 =
            let DataFinIncMkFinInc'' : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair ? (\ n => Data.FinInc.FinInc n));
                (DataFinIncMkFinInc'') consFuel = Test.DepTyCheck.Gen.label (fromString "Data.FinInc.MkFinInc (orders)") (((DataNatLTE) (outmostFuel)) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair val (Builtin.DPair.MkDPair n prf) => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Data.FinInc.MkFinInc {n = n} val prf)) }))
            in Test.DepTyCheck.Gen.label (fromString "Data.FinInc.FinInc[] (non-recursive)") ((DataFinIncMkFinInc'') (fuelArg1));
        DataNatLTE fuelArg1 =
            let DataNatLTEZero'' : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Builtin.DPair.DPair Prelude.Types.Nat (\ m => Data.Nat.LTE n m)));
                DataNatLTESucc'' : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Builtin.DPair.DPair Prelude.Types.Nat (\ n => Builtin.DPair.DPair Prelude.Types.Nat (\ m => Data.Nat.LTE n m)));
                (DataNatLTEZero'') consFuel = Test.DepTyCheck.Gen.label (fromString "Data.Nat.LTEZero (orders)") (((PreludeTypesNat) (outmostFuel)) >>= (\ right => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Data.Nat.LTEZero {right = right})))));
                (DataNatLTESucc'') consFuel = Test.DepTyCheck.Gen.label (fromString "Data.Nat.LTESucc (orders)") (((DataNatLTE) (consFuel)) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair left (Builtin.DPair.MkDPair right bndArg2124) => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Builtin.DPair.MkDPair _ (Builtin.DPair.MkDPair _ (Data.Nat.LTESucc {right = right} {left = left} (bndArg2124)))) }))
            in case (fuelArg1) {- : Data.Fuel.Fuel -} of {
                Data.Fuel.Dry => Test.DepTyCheck.Gen.label (fromString "Data.Nat.LTE[] (dry fuel)") ((DataNatLTEZero'') Data.Fuel.Dry);
                Data.Fuel.More subfuelArg => Test.DepTyCheck.Gen.label (fromString "Data.Nat.LTE[] (spend fuel)") (Test.DepTyCheck.Gen.frequency ((Builtin.MkPair Data.Nat1.one ((DataNatLTEZero'') (fuelArg1))) :: ((Builtin.MkPair (Deriving.DepTyCheck.Util.Reflection.leftDepth (subfuelArg)) ((DataNatLTESucc'') (subfuelArg))) :: Nil)))
            };
        (FilesystemsFAT32Metadata0) fuelArg1 =
            let FilesystemsFAT32MkMetadata'' : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty Filesystems.FAT32.Metadata;
                (FilesystemsFAT32MkMetadata'') consFuel = Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.MkMetadata (orders)") (((PreludeBasicsBool) (outmostFuel)) >>= (\ readOnly => ((PreludeBasicsBool) (outmostFuel)) >>= (\ hidden => ((PreludeBasicsBool) (outmostFuel)) >>= (\ system => ((PreludeBasicsBool) (outmostFuel)) >>= (\ archive => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Filesystems.FAT32.MkMetadata readOnly hidden system archive))))))
            in Test.DepTyCheck.Gen.label (fromString "Filesystems.FAT32.Metadata[] (non-recursive)") ((FilesystemsFAT32MkMetadata'') (fuelArg1));
        DataFinIncFinInc0 fuelArg1 interN =
            let DataFinIncMkFinInc'' : Data.Fuel.Fuel -> (n : ?) -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty (Data.FinInc.FinInc n);
                DataFinIncMkFinInc'' consFuel n = Test.DepTyCheck.Gen.label (fromString "Data.FinInc.MkFinInc (orders)") ((DataNatLTE1 outmostFuel n) >>= (\ lamc0 => case lamc0 of { Builtin.DPair.MkDPair val prf => Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} (Data.FinInc.MkFinInc {n = n} val prf) }))
            in Test.DepTyCheck.Gen.label (fromString "Data.FinInc.FinInc[0] (non-recursive)") (DataFinIncMkFinInc'' fuelArg1 interN);
        PreludeBasicsBool fuelArg =
            let PreludeBasicsFalse'' : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty Prelude.Basics.Bool;
                PreludeBasicsTrue'' : Data.Fuel.Fuel -> Test.DepTyCheck.Gen.Gen Test.DepTyCheck.Gen.Emptiness.MaybeEmpty Prelude.Basics.Bool;
                (PreludeBasicsFalse'') consFuel = Test.DepTyCheck.Gen.label (fromString "Prelude.Basics.False (orders)") (Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} Prelude.Basics.False);
                (PreludeBasicsTrue'') consFuel = Test.DepTyCheck.Gen.label (fromString "Prelude.Basics.True (orders)") (Prelude.pure {f = Test.DepTyCheck.Gen.Gen _} Prelude.Basics.True)
            in Test.DepTyCheck.Gen.label (fromString "Prelude.Basics.Bool[] (non-recursive)") (Test.DepTyCheck.Gen.oneOf {em = MaybeEmpty} (((PreludeBasicsFalse'') (fuelArg)) :: (((PreludeBasicsTrue'') (fuelArg)) :: Nil)))
    in FilesystemsFAT32Filesystem0 outmostFuel outerCfg
